name: Layer2 Feature Optimization

on:
  workflow_dispatch:
  push:
    paths:
      - '**/*.py'
      - 'optuna_system/**'
      - 'config/**'
      - 'run_feature_optimization.py'
      - '!**/*.md'

concurrency:
  group: layer2-optimization
  cancel-in-progress: false

jobs:
  layer2:
    name: Run Layer2 Optimization
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip wheel

      - name: Install dependencies for Layer2
        run: |
          pip install --upgrade pip wheel
          pip install pandas numpy scipy scikit-learn optuna joblib pyyaml python-dotenv requests pyarrow fastparquet lightgbm xgboost
          git lfs pull

      - name: Verify LFS files present
        run: |
          git lfs version
          git lfs ls-files | wc -l || true
          ls -alh data/processed/features/BTCUSDT_15m || true

      - name: Validate data artifacts
        run: |
          ls -alh data || true
          ls -alh data/raw || true
          ls -alh data/raw/BTCUSDT || true
          ls -alh data/processed || true
          ls -alh data/processed/features || true

      - name: Smoke test parquet readability
        run: |
          python - <<'PY'
          import pathlib
          import pandas as pd

          target = pathlib.Path('data/raw/BTCUSDT/BTCUSDT_15m_ohlcv.parquet')
          if not target.exists():
              raise SystemExit(f"❌ missing required parquet: {target}")

          df = pd.read_parquet(target)
          print(f"✅ parquet loaded: {target} -> shape={df.shape}")
          PY

      - name: Show environment
        run: |
          python -V
          pip -V
          pip list --format=columns | sort

      - name: Run Layer2 feature optimization
        env:
          PYTHONUTF8: '1'
          PYTHONIOENCODING: 'utf-8'
          ENVIRONMENT: 'dev'
          OPTUNA_ENHANCED_L2: '1'
          L2_TRIALS: '100'
          L2_MIN_WINRATE: '0.65'
          L2_MIN_SHARPE: '1.2'
          L2_MAX_DRAWDOWN: '0.15'
          L2_OBJECTIVE_MODE: 'multi'
        run: |
          python run_feature_optimization.py


