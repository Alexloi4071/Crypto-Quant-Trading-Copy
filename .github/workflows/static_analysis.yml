name: Static Analysis and Code Quality

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run flake8 linting
      run: |
        echo "🔍 Running flake8 static analysis..."
        flake8 src/ scripts/ --count --statistics --tee --output-file=flake8-report.txt
        
    - name: Run mypy type checking
      run: |
        echo "🔍 Running mypy type checking..."
        mypy src/ --html-report mypy-report
        
    - name: Run bandit security analysis
      run: |
        echo "🔍 Running bandit security analysis..."
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Check dependencies for vulnerabilities
      run: |
        echo "🔍 Checking dependencies for security vulnerabilities..."
        safety check --json --output safety-report.json
        
    - name: Archive analysis reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-reports
        path: |
          flake8-report.txt
          mypy-report/
          bandit-report.json
          safety-report.json
          
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read flake8 results
          let flake8Results = '';
          try {
            flake8Results = fs.readFileSync('flake8-report.txt', 'utf8');
          } catch (e) {
            flake8Results = 'No flake8 issues found!';
          }
          
          // Create comment
          const comment = `## 🔍 Static Analysis Results
          
          ### Flake8 Code Quality
          \`\`\`
          ${flake8Results.slice(0, 2000)}
          \`\`\`
          
          ### 📊 Analysis Summary
          - **Flake8**: ${flake8Results.includes('0') ? '✅ No issues' : '⚠️ Issues found'}
          - **MyPy**: Type checking completed
          - **Bandit**: Security analysis completed
          - **Safety**: Dependency vulnerability check completed
          
          📁 Detailed reports are available in the artifacts.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  prevent-old-imports:
    runs-on: ubuntu-latest
    name: Prevent Old Code Imports
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for old imports
      run: |
        echo "🚫 Checking for old/deprecated imports..."
        
        # 檢查是否有對舊檔案的引用
        OLD_PATTERNS=(
          "old_time_features"
          "old_label_generator" 
          "old_label_balancer"
          "old_technical_indicators"
          "src.labels.label_generator"
          "src.features.time_features"
        )
        
        ERRORS_FOUND=0
        
        for pattern in "${OLD_PATTERNS[@]}"; do
          echo "Checking for: $pattern"
          if grep -r "$pattern" src/ scripts/ docs/ --exclude-dir=__pycache__ --exclude-dir=logs; then
            echo "❌ Found deprecated import: $pattern"
            ERRORS_FOUND=1
          fi
        done
        
        if [ $ERRORS_FOUND -eq 1 ]; then
          echo "❌ Found deprecated imports! Please update to use new optimization system."
          exit 1
        else
          echo "✅ No deprecated imports found!"
        fi
        
    - name: Check for proper API usage
      run: |
        echo "✅ Checking for proper new API usage..."
        
        # 檢查是否正確使用新API
        REQUIRED_PATTERNS=(
          "src.optimization.label_optimizer"
          "src.features.feature_generator"
        )
        
        for pattern in "${REQUIRED_PATTERNS[@]}"; do
          if grep -r "$pattern" src/ scripts/ --exclude-dir=__pycache__; then
            echo "✅ Found correct usage: $pattern"
          fi
        done
