apiVersion: v1
kind: Namespace
metadata:
  name: trading-system
  labels:
    name: trading-system

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-config
  namespace: trading-system
data:
  DATABASE_URL: "postgresql://trading_user:trading_password@postgres-service:5432/trading_db"
  REDIS_URL: "redis://:trading_redis_password@redis-service:6379/0"
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  ENABLE_MONITORING: "true"
  MONITORING_INTERVAL: "60"
  TRADING_MODE: "paper"
  INITIAL_CAPITAL: "10000"
  MAX_POSITIONS: "5"
  BINANCE_TESTNET: "true"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: trading-secrets
  namespace: trading-system
type: Opaque
stringData:
  BINANCE_API_KEY: "your_binance_api_key"
  BINANCE_SECRET_KEY: "your_binance_secret_key"
  CRYPTOCOMPARE_API_KEY: "your_cryptocompare_key"
  COINGECKO_API_KEY: "your_coingecko_key"
  NEWS_API_KEY: "your_news_api_key"
  TELEGRAM_BOT_TOKEN: "your_telegram_bot_token"
  TELEGRAM_CHAT_ID: "your_telegram_chat_id"
  EMAIL_SMTP_SERVER: "smtp.gmail.com"
  EMAIL_USERNAME: "your_email@gmail.com"
  EMAIL_PASSWORD: "your_app_password"
  SECRET_KEY: "your-very-secure-secret-key"
  API_KEY_SALT: "your-api-key-salt"
  POSTGRES_PASSWORD: "trading_password"
  REDIS_PASSWORD: "trading_redis_password"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: trading-system
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "trading_db"
        - name: POSTGRES_USER
          value: "trading_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U trading_user -d trading_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U trading_user -d trading_db
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: trading-system
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: trading-system
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: trading-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Trading System Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-system
  namespace: trading-system
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: trading-system
  template:
    metadata:
      labels:
        app: trading-system
    spec:
      initContainers:
      - name: wait-for-db
        image: trading-system:latest
        command: ['python', 'scripts/wait_for_db.py']
        envFrom:
        - configMapRef:
            name: trading-config
        - secretRef:
            name: trading-secrets
      - name: init-database
        image: trading-system:latest
        command: ['python', 'scripts/setup_database.py']
        envFrom:
        - configMapRef:
            name: trading-config
        - secretRef:
            name: trading-secrets
      containers:
      - name: trading-system
        image: trading-system:latest
        ports:
        - containerPort: 8080
          name: api
        - containerPort: 8081
          name: websocket
        - containerPort: 8082
          name: dashboard
        envFrom:
        - configMapRef:
            name: trading-config
        - secretRef:
            name: trading-secrets
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: models-storage
          mountPath: /app/models
        - name: logs-storage
          mountPath: /app/logs
        command:
        - python
        - scripts/main.py
        - trade
        - --mode
        - paper
        - --symbols
        - BTCUSDT
        - ETHUSDT
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
      - name: models-storage
        persistentVolumeClaim:
          claimName: models-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: logs-pvc

---
# Trading System Service
apiVersion: v1
kind: Service
metadata:
  name: trading-system-service
  namespace: trading-system
spec:
  selector:
    app: trading-system
  ports:
  - name: api
    port: 8080
    targetPort: 8080
  - name: websocket
    port: 8081
    targetPort: 8081
  - name: dashboard
    port: 8082
    targetPort: 8082
  type: ClusterIP

---
# Data Downloader CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-downloader
  namespace: trading-system
spec:
  schedule: "0 */4 * * *"  # Every 4 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: data-downloader
            image: trading-system:latest
            command:
            - python
            - scripts/download_data.py
            - update
            - --hours-back
            - "4"
            envFrom:
            - configMapRef:
                name: trading-config
            - secretRef:
                name: trading-secrets
            volumeMounts:
            - name: data-storage
              mountPath: /app/data
            resources:
              requests:
                memory: "512Mi"
                cpu: "250m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: data-storage
            persistentVolumeClaim:
              claimName: data-pvc
          restartPolicy: OnFailure

---
# Model Training CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: model-trainer
  namespace: trading-system
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: model-trainer
            image: trading-system:latest
            command:
            - python
            - scripts/train_models.py
            - retrain
            - --symbols
            - BTCUSDT
            - ETHUSDT
            envFrom:
            - configMapRef:
                name: trading-config
            - secretRef:
                name: trading-secrets
            volumeMounts:
            - name: data-storage
              mountPath: /app/data
            - name: models-storage
              mountPath: /app/models
            resources:
              requests:
                memory: "2Gi"
                cpu: "1000m"
              limits:
                memory: "4Gi"
                cpu: "2000m"
          volumes:
          - name: data-storage
            persistentVolumeClaim:
              claimName: data-pvc
          - name: models-storage
            persistentVolumeClaim:
              claimName: models-pvc
          restartPolicy: OnFailure

---
# System Maintenance CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: system-maintenance
  namespace: trading-system
spec:
  schedule: "0 1 * * *"  # Daily at 1 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: maintenance
            image: trading-system:latest
            command:
            - python
            - scripts/system_maintenance.py
            - full
            - --data-days
            - "30"
            - --model-days
            - "90"
            - --log-days
            - "7"
            envFrom:
            - configMapRef:
                name: trading-config
            - secretRef:
                name: trading-secrets
            volumeMounts:
            - name: data-storage
              mountPath: /app/data
            - name: models-storage
              mountPath: /app/models
            - name: logs-storage
              mountPath: /app/logs
            - name: backups-storage
              mountPath: /app/backups
            resources:
              requests:
                memory: "512Mi"
                cpu: "250m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: data-storage
            persistentVolumeClaim:
              claimName: data-pvc
          - name: models-storage
            persistentVolumeClaim:
              claimName: models-pvc
          - name: logs-storage
            persistentVolumeClaim:
              claimName: logs-pvc
          - name: backups-storage
            persistentVolumeClaim:
              claimName: backups-pvc
          restartPolicy: OnFailure

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: trading-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models-pvc
  namespace: trading-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: trading-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backups-pvc
  namespace: trading-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trading-system-ingress
  namespace: trading-system
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.trading-system.com
    - dashboard.trading-system.com
    secretName: trading-system-tls
  rules:
  - host: api.trading-system.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: trading-system-service
            port:
              number: 8080
  - host: dashboard.trading-system.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: trading-system-service
            port:
              number: 8082

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trading-system-hpa
  namespace: trading-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trading-system
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: trading-system-pdb
  namespace: trading-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: trading-system

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trading-system-network-policy
  namespace: trading-system
spec:
  podSelector:
    matchLabels:
      app: trading-system
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8082
  - from:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - from:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow external connections (APIs, exchanges)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Resource Quota
apiVersion: v1
kind: ResourceQuota
metadata:
  name: trading-system-quota
  namespace: trading-system
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    persistentvolumeclaims: "10"
    pods: "20"
    services: "10"

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-system-sa
  namespace: trading-system

---
# Role for trading system
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: trading-system
  name: trading-system-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: trading-system-rolebinding
  namespace: trading-system
subjects:
- kind: ServiceAccount
  name: trading-system-sa
  namespace: trading-system
roleRef:
  kind: Role
  name: trading-system-role
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap for PostgreSQL initialization scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: trading-system
data:
  01-init-db.sql: |
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create tables for trading system
    CREATE TABLE IF NOT EXISTS ohlcv_data (
        id SERIAL PRIMARY KEY,
        symbol VARCHAR(20) NOT NULL,
        timeframe VARCHAR(10) NOT NULL,
        timestamp TIMESTAMP NOT NULL,
        open DECIMAL(20,8) NOT NULL,
        high DECIMAL(20,8) NOT NULL,
        low DECIMAL(20,8) NOT NULL,
        close DECIMAL(20,8) NOT NULL,
        volume DECIMAL(20,8) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(symbol, timeframe, timestamp)
    );
    
    CREATE INDEX IF NOT EXISTS idx_ohlcv_symbol_timeframe_timestamp ON ohlcv_data(symbol, timeframe, timestamp);
    
    CREATE TABLE IF NOT EXISTS trading_signals (
        id SERIAL PRIMARY KEY,
        symbol VARCHAR(20) NOT NULL,
        timeframe VARCHAR(10) NOT NULL,
        signal_type VARCHAR(20) NOT NULL,
        confidence DECIMAL(5,4) NOT NULL,
        price DECIMAL(20,8) NOT NULL,
        source VARCHAR(50) NOT NULL,
        metadata JSONB,
        timestamp TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE INDEX IF NOT EXISTS idx_signals_symbol_timestamp ON trading_signals(symbol, timestamp);
    
    CREATE TABLE IF NOT EXISTS positions (
        id SERIAL PRIMARY KEY,
        symbol VARCHAR(20) NOT NULL,
        side VARCHAR(10) NOT NULL,
        size DECIMAL(20,8) NOT NULL,
        entry_price DECIMAL(20,8) NOT NULL,
        current_price DECIMAL(20,8),
        pnl DECIMAL(20,8),
        stop_loss DECIMAL(20,8),
        take_profit DECIMAL(20,8),
        status VARCHAR(20) DEFAULT 'open',
        opened_at TIMESTAMP NOT NULL,
        closed_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE INDEX IF NOT EXISTS idx_positions_symbol_status ON positions(symbol, status);

---
# Monitoring Service Monitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: trading-system-monitor
  namespace: trading-system
  labels:
    app: trading-system
spec:
  selector:
    matchLabels:
      app: trading-system
  endpoints:
  - port: api
    path: /metrics
    interval: 30s