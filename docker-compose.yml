version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    command: redis-server --requirepass trading_redis_password --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading System Application
  trading_system:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: trading_system_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://trading_user:trading_password@postgres:5432/trading_db
      REDIS_URL: redis://:trading_redis_password@redis:6379/0
      
      # Application Settings
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      ENABLE_MONITORING: "true"
      MONITORING_INTERVAL: 60
      
      # Trading Configuration
      TRADING_MODE: paper  # Change to 'live' for live trading
      INITIAL_CAPITAL: 10000
      MAX_POSITIONS: 5
      
      # API Keys (Set these in .env file)
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      BINANCE_TESTNET: "true"
      
      # External APIs
      CRYPTOCOMPARE_API_KEY: ${CRYPTOCOMPARE_API_KEY}
      COINGECKO_API_KEY: ${COINGECKO_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      
      # Notifications
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      EMAIL_SMTP_SERVER: ${EMAIL_SMTP_SERVER}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      API_KEY_SALT: ${API_KEY_SALT:-your-api-key-salt}
    
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config:ro
    
    ports:
      - "8080:8080"  # API server
      - "8081:8081"  # WebSocket server
      - "8082:8082"  # Monitoring dashboard
    
    networks:
      - trading_network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python scripts/wait_for_db.py &&
        echo 'Initializing database...' &&
        python scripts/setup_database.py &&
        echo 'Starting trading system...' &&
        python scripts/main.py trade --mode paper --symbols BTCUSDT ETHUSDT
      "

  # Data Downloader Service
  data_downloader:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: trading_data_downloader
    environment:
      DATABASE_URL: postgresql://trading_user:trading_password@postgres:5432/trading_db
      REDIS_URL: redis://:trading_redis_password@redis:6379/0
      LOG_LEVEL: INFO
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      CRYPTOCOMPARE_API_KEY: ${CRYPTOCOMPARE_API_KEY}
    
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    
    networks:
      - trading_network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    command: >
      sh -c "
        echo 'Starting data download service...' &&
        while true; do
          python scripts/download_data.py update --hours-back 4 &&
          echo 'Data update completed, sleeping for 1 hour...' &&
          sleep 3600
        done
      "

  # Model Training Service
  model_trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: trading_model_trainer
    environment:
      DATABASE_URL: postgresql://trading_user:trading_password@postgres:5432/trading_db
      REDIS_URL: redis://:trading_redis_password@redis:6379/0
      LOG_LEVEL: INFO
    
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    
    networks:
      - trading_network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    command: >
      sh -c "
        echo 'Waiting for initial data...' &&
        sleep 300 &&
        while true; do
          echo 'Starting model training...' &&
          python scripts/train_models.py retrain --symbols BTCUSDT ETHUSDT &&
          echo 'Model training completed, sleeping for 6 hours...' &&
          sleep 21600
        done
      "

  # System Maintenance Service
  maintenance:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: trading_maintenance
    environment:
      DATABASE_URL: postgresql://trading_user:trading_password@postgres:5432/trading_db
      REDIS_URL: redis://:trading_redis_password@redis:6379/0
      LOG_LEVEL: INFO
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
    
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./backups:/app/backups
    
    networks:
      - trading_network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    command: >
      sh -c "
        echo 'Starting maintenance service...' &&
        while true; do
          echo 'Running daily maintenance...' &&
          python scripts/system_maintenance.py full --data-days 30 --model-days 90 --log-days 7 &&
          echo 'Maintenance completed, sleeping for 24 hours...' &&
          sleep 86400
        done
      "

  # Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: trading_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    
    ports:
      - "3000:3000"
    
    networks:
      - trading_network
    
    restart: unless-stopped
    
    depends_on:
      - postgres

  # Prometheus for Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: trading_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    
    ports:
      - "9090:9090"
    
    networks:
      - trading_network
    
    restart: unless-stopped

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading_network
    depends_on:
      - trading_system
      - grafana
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment file template
# Create .env file with these variables:
#
# # Exchange API Keys
# BINANCE_API_KEY=your_binance_api_key
# BINANCE_SECRET_KEY=your_binance_secret_key
#
# # External Data APIs
# CRYPTOCOMPARE_API_KEY=your_cryptocompare_key
# COINGECKO_API_KEY=your_coingecko_key
# NEWS_API_KEY=your_news_api_key
#
# # Notifications
# TELEGRAM_BOT_TOKEN=your_telegram_bot_token
# TELEGRAM_CHAT_ID=your_telegram_chat_id
# EMAIL_SMTP_SERVER=smtp.gmail.com
# EMAIL_USERNAME=your_email@gmail.com
# EMAIL_PASSWORD=your_app_password
#
# # Security
# SECRET_KEY=your-very-secure-secret-key-change-this
# API_KEY_SALT=your-api-key-salt-change-this